I wrote a custome merge function in Record, but maybe it would be better to use a library?

[Lodash.merge](https://lodash.com/docs/#merge)

mergeWidth should be flexible enough to add debug reporting and customize behavior
[Lodash.mergeWidth](https://lodash.com/docs/#mergeWith)

might be worth compairing the merge function to
https://github.com/deepstreamIO/deepstream.io/blob/892c0fea1b348cc5152e3b75cf19e3241ece3edc/src/utils/utils.ts#L77

to see how the approaches differ, if one is better


# NOW
In the participant code...

Sometimes getting a Invalid state transition 
```
Invalid state transition.
Details: {"transition":13,"state":"DELETING"} 
History: 
	From - to LOADING_OFFLINE via -
	From LOADING_OFFLINE to SUBSCRIBING via 23
	From SUBSCRIBING to READY via 4
	From READY to DELETING via 9
```

Get you head back in the game and review the code paths for getMyShared and getParticipanShared

Do they create and delete things correctly?
Do they wait FULLY for the records in participants to be ready?
I THINK NO.
All shared objects SHOULD be loaded and initialized BEFORE setup is called, but i don't think participant array currently is fully ready.





# Tooling 

- upgrade webpack? maybe jump to esbuild and/or vite?

- consider providing min and unmin versions
	https://stackoverflow.com/questions/25956937/how-to-build-minified-and-uncompressed-bundle-with-webpack
	- compare to other p5 libraries

- can bake package version into code somehow?

.- why is version on npm up to date, only 50k, and missing css? also dist was empty

# Bugs
- you currently need to call getParticipantShared every time you use it to ensure you have an update to date list
- make this work more like shared where i replace contents keeping references pointting the right spot

	
# Style / Naming

# Enhancements

- Record 

- Client
	- consider cacheing random id in _session_ storage so reloads can reconnect as same client
	
- Room
	- make debug view opt in
	- add ping to debug view?
	
	
# Docs
- also, while possibly this same library could be used for long term server persistance, for now limit the scope to session-longevity multiplayer
	
# Questions

# Tips

# Examples

# Requests
- add a way to clear all the shared records in a room

# Branch - Subscribe

--- get shared object changed messages

# Branch - Push Improvements

- config auto push or not on records
- config record push debounce

# Branch - Participants

--- expose participant count
--- expose participant list
--- expose a record of info for each participant

# Branch - Info
- using vue?
- debug view?
- room view?
	- show room records
	- show room participants
- dashboard view?
	- show apps, rooms, records, participants

# Branch - Deep Update
- check this out, in order to make record support sharing any property of the record (not just .shared)
	-- Doesn't work because of the `shortcut reference` problem
	- 1) watch the whole record instead of shared
	- 2) return the part of the whole record you want to expose, or that is requested
	- 3) done!
- ?Do a deep nested update of .shared (or whole record) so that shortcut references will still work?
	-- would solve the `shortcut reference` problem